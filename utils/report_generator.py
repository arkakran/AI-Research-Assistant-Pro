
import re
from datetime import datetime
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer  # CORRECT IMPORT
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

def convert_markdown_to_reportlab(text: str) -> str:
    # Convert **bold** to <b>bold</b>
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    
    # Convert *italic* to <i>italic</i>
    text = re.sub(r'(?<!\*)\*([^*]+?)\*(?!\*)', r'<i>\1</i>', text)
    
    # Convert `code` to monospace
    text = re.sub(r'`(.*?)`', r'<font name="Courier">\1</font>', text)
    
    # Handle URLs
    text = re.sub(r'https?://[^\s<>"{}|\\^`[\]]+', r'<link href="\g<0>">\g<0></link>', text)
    
    return text

class EnhancedReportGenerator:
    @staticmethod
    def generate_markdown(report_content: str, query: str) -> str:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        markdown_content = f"""# ðŸ”¬ AI Research Report

**Research Query:** {query}  
**Generated:** {timestamp}  
**Powered by:** LLaMA-3.3-70B + Tavily Advanced Search  

---

{report_content}

---

## Report Metadata
- **Search Engine:** Tavily AI Search (Advanced)
- **AI Model:** LLaMA-3.3-70B-Versatile via Groq
- **Generated:** {timestamp}

*Generated by AI Research Assistant with comprehensive web search capabilities.*
"""
        return markdown_content
    
    @staticmethod
    def generate_pdf(report_content: str, query: str) -> BytesIO:
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter, topMargin=1*inch)
        styles = getSampleStyleSheet()
        
        # Professional styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Title'],
            fontSize=20,
            textColor='#1e40af',
            spaceAfter=30,
            alignment=1
        )
        
        subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=styles['Normal'],
            fontSize=12,
            textColor='#64748b',
            spaceAfter=20,
            alignment=1
        )
        
        heading1_style = ParagraphStyle(
            'CustomHeading1',
            parent=styles['Heading1'],
            fontSize=16,
            textColor='#1e40af',
            spaceBefore=20,
            spaceAfter=12
        )
        
        heading2_style = ParagraphStyle(
            'CustomHeading2',
            parent=styles['Heading2'],
            fontSize=14,
            textColor='#1e40af',
            spaceBefore=16,
            spaceAfter=10
        )
        
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=8
        )
        
        bullet_style = ParagraphStyle(
            'CustomBullet',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            leftIndent=20
        )
        
        content = []
        
        # Header
        content.append(Paragraph("ðŸ”¬ AI Research Report", title_style))
        content.append(Paragraph(f"<b>Query:</b> {query}", subtitle_style))
        content.append(Paragraph(f"<b>Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", subtitle_style))
        content.append(Spacer(1, 0.3*inch))
        
        # Process content
        lines = report_content.split('\n')
        
        for line in lines:
            line = line.strip()
            
            if not line:
                content.append(Spacer(1, 0.1*inch))
                continue
                
            processed_line = convert_markdown_to_reportlab(line)
            
            if line.startswith('# '):
                content.append(Paragraph(processed_line[2:], heading1_style))
            elif line.startswith('## '):
                content.append(Paragraph(processed_line[3:], heading2_style))
            elif line.startswith('- ') or line.startswith('* '):
                bullet_text = processed_line[2:]
                content.append(Paragraph(f"â€¢ {bullet_text}", bullet_style))
            else:
                if processed_line:
                    content.append(Paragraph(processed_line, normal_style))
            
            content.append(Spacer(1, 0.05*inch))
        
        doc.build(content)
        buffer.seek(0)
        return buffer
